package main

func main() {
	// 服务注册与发现
	//
	// 在 分布式系统 或 微服务架构 中，服务通常部署在多个实例上（如 Kubernetes Pods、Docker 容器或不同的物理/虚拟机），它们的 IP 地址和端口可能会动态变化。
	// 为了让不同的服务能够 自动发现 彼此，而不需要手动配置，我们需要 服务注册与发现机制。
	//
	// (1) 服务注册
	// 当一个服务启动时，它会 注册自己的信息到一个 服务注册中心（如 IP 地址、端口、健康状态等）。
	// 如果一个服务实例崩溃，注册中心也会及时移除它。
	//
	// (2) 服务发现
	// 当一个服务想调用另一个服务时，它可以：
	//	•	客户端发现（Client-side Discovery）：由客户端查询注册中心，获取目标服务的地址并直接调用。
	//	•	服务端发现（Server-side Discovery）：客户端将请求发送给负载均衡器，由它来查询服务地址并转发请求。
	//
	// zookeeper
	// 主要用于java
	// 功能强大，不仅只是服务注册发现，提供 watcher 机制能够实时获取服务提供者状态，dubbo 等框架支持
	// 但是没有健康检查，需要服务中集成 sdk，复杂度高，不支持多数据中心
	//
	// Consul（推荐，适用于多语言 & 健康检查）
	// 简单易用，适用于多语言，自带健康检查，支持多数据中心，web 管理页面，支持额外 kv 存储，不需要集成 sdk，使用http/dns接口
	// 不能实时获取服务信息的变化通知，需要程序自己去拉
	//	•	特点：
	//	•	支持 健康检查，如果实例宕机，会自动移除。
	//	•	提供 DNS 解析，可以用 service-name.consul 直接访问服务。
	//	•	支持 KV 存储，可以存储额外的配置信息。
	//	•	适用于 多语言微服务（Go、Java、Python 都支持）。
	//	•	适用场景：
	//	•	需要 健康检查，确保只有可用的实例被调用。
	//	•	需要 动态配置管理（可以存储配置信息）。
	//	•	适用于 Go + Java + Python 混合架构。
	//
	// Etcd（推荐，适用于 Go & 云原生）
	// 简单易用，不需要集成 sdk，可配置性强，使用http接口
	// 没有健康检查，需要配合第三方工具一起完成服务发现，不支持多数据中心
	//	•	特点：
	//	•	分布式、高可用的键值存储系统（Raft 一致性协议）。
	//	•	适用于 Kubernetes（K8s）、云计算、微服务架构。
	//	•	提供 Watcher 机制，支持自动感知服务变化。
	//	•	API 友好，适合 Go 语言（go.etcd.io/etcd/client/v3）。
	//	•	适用场景：
	//	•	云原生微服务（如 K8s）。
	//	•	高一致性 & 高可用的分布式系统。

}
