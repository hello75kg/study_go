package main

func main() {
	// 配置中心
	// 统一管理配置项
	// 额外功能：实时推送/权限/集群/配置回滚/环境隔离
	//
	// Apollo
	//	•	背景与定位：由携程（Ctrip）开源，专注于动态配置管理。主要面向企业级应用，提供丰富的功能，如版本管理、变更审计、灰度发布、回滚等。
	//	•	架构特点：采用独立的配置中心架构，通常依赖 MySQL 作为后端存储，通过 Web UI 管理配置，支持多环境、多集群。
	//	•	适用场景：适用于配置需求复杂、要求稳定性与审计功能较强的企业级项目；如果你的系统主要基于 Java 生态，Apollo 的成熟特性和细粒度管理是优势所在。
	//	•	如果项目处于成熟的企业级应用中，对配置变更的审计、回滚、灰度发布等功能要求较高，并且主要采用 Java 技术栈，Apollo 将提供更丰富的管理功能与监控能力。
	// Nacos
	//	•	背景与定位：由阿里巴巴开源，是一个面向云原生应用的服务发现与配置管理平台。它不仅提供配置中心功能，还集成了服务发现、服务治理等能力。
	//	•	架构特点：作为云原生解决方案，Nacos 支持动态配置管理、数据的实时推送，并且与 Spring Cloud、Kubernetes 等生态有良好集成。
	//	•	适用场景：适合微服务、容器化以及云原生架构项目；如果需要在同一个平台上同时处理服务发现和配置管理，或者项目运行在 Kubernetes 环境中，Nacos 会更方便。
	//	•	如果你的系统是微服务架构、云原生部署、或需要同时处理服务发现与配置管理，尤其是在 Kubernetes 环境中，Nacos 则具有更好的集成性和扩展性，同时支持动态推送配置，降低了系统复杂性。
	//
	// 对比项	Apollo										Nacos
	// 功能特性	动态配置、版本管理、变更审计、灰度发布、回滚		动态配置、服务发现、健康检查、数据推送、集群管理
	// 架构设计	独立的配置中心，依赖关系较清晰					集配置管理与服务发现于一体，更适合云原生和微服务场景
	// 生态整合	更适合 Java 生态，已有较成熟的运维和监控方案		与 Spring Cloud Alibaba、Kubernetes 集成度更高
	// 易用性	界面友好、功能丰富，配置粒度精细					部署较简单，支持动态刷新，适合快速迭代
	// 扩展性	功能稳定成熟，扩展较为稳健						面向云原生场景，可实现服务发现、配置管理、服务治理一体化
	//
	// nacos 安装：
	// docker run --name nacos-standalone -e MODE=standalone -e JVM_XMS=512m -e JVM_XMX=512m -e JVM_XMN=256m -p 8848:8848 -d nacos/nacos-server:latest
	//
}
